
@ 다중 파일 업로드 (여러 개를 올리고 싶을 때)

  람다식 : 프로그래밍에서 사용되는 간단한 함수 >> 함수를 간단하게 표현하는 방법
      주로 이름 없는 작은 함수를 만들 때 사용됨 >> 익명 함수 라고도 부름
      예시 1) 별걸 다 줄이네? --> 별다줄 >> 짧고 간단하게 말을 줄이는 것이라고 보면 됨. 람다식도 함수를 짧고 간단하게 표현하는 것임.
        예시 2) 더하기(x,y); 
                return x+y;   // 일반 코드
                더하기 = lambda x,y:x+y  // 람다식 코드 - x,y 는 입력값이고 x+y는 그 입력값들을 더한 결과
        이처럼 프로그래밍에서도 간단하게 함수를 표현할 수 있게 해줌


	// 다중 파일 업로드
	public List<String> multiFileUpload(List<MultipartFile> fileList){
		List<String> fileNameList = new ArrayList<>();
		String path = "C:\\spring\\upload\\";
		fileList.forEach(mf-){
			String fileName = UUID.randomUUID().toString().replace("-", "") + mf.getOriginalFilename(); 
			File copy = new File(path+fileName);
			try {
				mf.transferTo(copy);
				fileNameList.add(mf.getOriginalFilename());
			}catch(Exception e) {
				e.printStackTrace();
			}
		});
		return fileNameList;
	}

파일을 리스트로 받았으니까 반복해주면 된다. >> for문
람다식 표현은 for(MultipartFile mf : fileList)랑 같은 구조이다.
mf 는 변수이고 파일리스트 안에 있는 게 대입되는 방식이다. 
람다식이 쉽고 빠르다. 빠른 이유를 설명해보겠다.
파일리스트 안에 들어가 있는 건 멀티파트파일밖에 없다. 하나씩 꺼낸다고치면 이 멀티파트파일 객체가 하나씩 나오는 것이다.
리스트 안에 들어가는 것도 스트링이고 꺼내는 것도 스트링이다. 이는 파일이 확정되었다는 뜻이다.
확정 >> 제너릭 선언을 했으면 여기에 대입되고 나오는 것이 멀티파트파일뿐이라는 것이다.
	이는 arrayList 안에 있는 forEach 메서드가 기능을 만든 것이다. 이 메서드를 통해 멀티파트파일이 확정되는 작업이 반복된다.
	그리고 람다식 밑이 구현부이다. for문으로 치자면 실행파트가 밑에 코드로 쫙 나오는 것이다.

